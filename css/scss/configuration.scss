// Переменные, мапы и списки

$colors-map: (
  "white": #fefae0,
  "extra-white": #faedcd,
  "light-green": #ccd5ae,
  "green": #606c38,
  "dark-green": #283618,
  "orange": #dda15e,
  "dark-orange": #bc6c25
);

@function color($color-name) {
  @return map-get($colors-map, $color-name);
}

$font-weights-map: (
  "thin": 100,
  "extra-light": 200,
  "light": 300,
  "regular": 400,
  "medium": 500,
  "semi-bold": 600,
  "bold": 700,
  "extra-bold": 800,
  "black": 900,
  "extra-black": 1000
);

@function font-weight($weight-name) {
  @return map-get($font-weights-map, $weight-name);
}

$text-list: (
  main-title "Noto Sans" semi-bold normal color("extra-white") 30px 64px,
  main-subtitle "Noto Sans" semi-bold normal color("extra-white") 16px 18px,
);

$link-list: (navbar "Noto Sans" medium normal color("dark-green") color("dark-orange") 14px 20px,);

// Сложные миксины

$breakpoints: (
  mobile: 300px,
  desktop: 1280px
);

@mixin respond-to($media) {
  @if map-has-key($breakpoints, $media) {
    @media only screen and (min-width: map-get($breakpoints, $media)) {
      @content;
    }
  } @else {
    @warn "'#{ $media }' is not a valid media query. Available breakpoints: #{map-keys($breakpoints)}";
  }
}

@mixin size($type, $width, $height: $width) {
  @if $type == min {
    min-width: $width;
    @if $height != 0px {
      min-height: $height;
    }
  } @else if $type == max {
    max-width: $width;
    @if $height != 0px {
      max-height: $height;
    }
  } @else if $type == default {
    width: $width;
    @if $height != 0px {
      height: $height;
    }
  }
}

@mixin flex($flex: on, $direction: null, $justify: null, $align: null, $wrap: null, $gap: null) {
  @if $flex == on {
    display: flex;
  }

  @if $direction != null {
    flex-direction: $direction;
  }

  @if $justify != null {
    justify-content: $justify;
  }

  @if $align != null {
    align-items: $align;
  }

  @if $wrap != null {
    flex-wrap: $wrap;
  }

  @if $gap != null {
    gap: $gap;
  }
}

@mixin axis-indent($type, $axis, $value, $yvalue: null) {
  @if $axis == x {
    #{$type}-left: $value;
    #{$type}-right: $value;
  } @else if $axis == y {
    #{$type}-top: $value;
    #{$type}-bottom: $value;
  } @else if $axis == xy {
    #{$type}-left: $value;
    #{$type}-right: $value;
    @if $yvalue != null {
      #{$type}-top: $yvalue;
      #{$type}-bottom: $yvalue;
    }
  } @else {
    @warn "'#{ $axis }' is not a valid axis.";
  }
}

@mixin border-radius($top-left: null, $top-right: null, $bottom-right: null, $bottom-left: null) {
  @if $top-left != null and $top-right != null and $bottom-right != null and $bottom-left != null {
    border-radius: $top-left $top-right $bottom-right $bottom-left;
  } @else if $top-left != null {
    @if type-of($top-left) == number and unit($top-left) != "" {
      border-radius: $top-left;
    }
  }
}

@mixin border($sides: null, $width: null, $style: null, $color: null, $radiuses...) {
  @if $sides == all {
    @if $width != null {
      border-width: $width;
    }
    @if $style != null {
      border-style: $style;
    }
    @if $color != null {
      border-color: $color;
    }
  } @else {
    @each $side in $sides {
      @if $width != null {
        border-#{$side}-width: $width;
      }
      @if $style != null {
        border-#{$side}-style: $style;
      }
      @if $color != null {
        border-#{$side}-color: $color;
      }
    }
  }
  @if length($radiuses) > 0 {
    @include border-radius($radiuses...);
  }
}

// Простые миксины

// Сложные шаблоны

@each $item in $text-list {
  $name: nth($item, 1);
  $font: nth($item, 2);
  $font-weight: nth($item, 3);
  $font-style: nth($item, 4);
  $color: nth($item, 5);
  $font-size: nth($item, 6);
  $desktop-font-size: nth($item, 7);

  %#{$name} {
    font-family: $font;
    font-weight: font-weight($font-weight);
    font-style: $font-style;
    font-size: $font-size;
    color: $color;
    @if $font-size != $desktop-font-size {
      @include respond-to(desktop) {
        font-size: $desktop-font-size;
      }
    }
  }
}

@each $item in $link-list {
  $name: nth($item, 1);
  $font: nth($item, 2);
  $font-weight: nth($item, 3);
  $font-style: nth($item, 4);
  $color: nth($item, 5);
  $second-color: nth($item, 6);
  $font-size: nth($item, 7);
  $desktop-font-size: nth($item, 8);

  %#{$name} {
    @extend %simple-transition;
    font-family: $font;
    font-weight: font-weight($font-weight);
    font-style: $font-style;
    color: $color;
    font-size: $font-size;
    &:hover,
    &:active {
      color: $second-color;
    }
    @if $font-size != $desktop-font-size {
      @include respond-to(desktop) {
        font-size: $desktop-font-size;
      }
    }
  }
}

// Простые шаблоны

%container {
  width: 300px;
  margin: 0 auto;
  @include respond-to(desktop) {
    width: 1280px;
  }
}

%simple-transition {
  transition: 0.3s;
  &:hover {
    transition: 0.3s;
  }
  &:active {
    transition: 0.05s;
  }
}

%simple-scale {
  &:active {
    transform: scale(0.9);
  }
}

%input {
  @extend %simple-transition;
  color: color("green");
  font: {
    family: "Noto Sans";
    weight: font-weight("medium");
  }
  background-color: color("extra-white");
  @include border(all, $style: solid, $color: color("green"));
  &:hover,
  &:active {
    color: color("dark-green");
    background-color: color("light-green");
    @include border(all, $color: color("dark-green"));
    &::placeholder {
      color: color("dark-green");
    }
  }
  &::placeholder {
    color: color("green");
  }
}

%button-white {
  @extend %simple-transition;
  @extend %simple-scale;
  @include border(all, $style: solid, $color: color("green"));
  color: color("green");
  background-color: color("extra-white");
  font: {
    family: "Noto Sans";
    weight: font-weight("medium");
  }
  &:hover,
  &:active {
    background-color: color("green");
    color: color("white");
    @include border(all, $color: color("dark-green"));
  }
}
